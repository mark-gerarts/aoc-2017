(defun parse (input)
  (let ((group-value 1)
        (total 0)
        (in-garbage 'nil)
        (slurp-next 'nil)
        (garbage-count 0))
    (loop for char across input
          do (cond
               (slurp-next (setf slurp-next 'nil))
               ((char= char #\!) (setf slurp-next 't))
               ((and in-garbage (char/= char #\>)) (incf garbage-count))
               ((char= char #\<) (setf in-garbage 't))
               ((char= char #\>) (setf in-garbage 'nil))
               (in-garbage 'nil)
               ((char= char #\{) (progn (incf total group-value)
                                        (incf group-value)))
               ((char= char #\}) (decf group-value))))
    (format t "Total: ~A~%Garbage: ~A" total garbage-count)))

(defun file-get-contents (filename)
  (with-open-file (stream filename)
    (let ((contents (make-string (file-length stream))))
      (read-sequence contents stream)
      contents)))
